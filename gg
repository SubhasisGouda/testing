using Microsoft.SharePoint.Client;
using System;

class Program
{
    static void Main(string[] args)
    {
        // SharePoint Site URL
        string siteUrl = "https://yoursite.sharepoint.com/sites/yoursite";

        // User credentials (for authentication)
        string username = "yourusername@yoursite.com";
        string password = "yourpassword"; // Consider using SecureString in production

        // List name
        string listName = "MyCustomList";

        // Create a new SharePoint client context
        using (ClientContext context = new ClientContext(siteUrl))
        {
            // Credentials for SharePoint Online (Use Office 365 authentication)
            context.Credentials = new SharePointOnlineCredentials(username, GetSecureString(password));

            // Get the web (site) and the list by title
            Web web = context.Web;
            List list = web.Lists.GetByTitle(listName);

            // Prepare the new list item
            ListItemCreationInformation itemCreateInfo = new ListItemCreationInformation();
            ListItem newItem = list.AddItem(itemCreateInfo);

            // Add data to the list item (field names must match column internal names in SharePoint)
            newItem["Title"] = "New Item Title";
            newItem["Email"] = "newuser@example.com";

            // Submit the new item to the list
            newItem.Update();

            // Execute the query to add the item
            context.ExecuteQuery();

            Console.WriteLine("Item added successfully.");
        }
    }

    // Helper method to convert password into SecureString
    static SecureString GetSecureString(string password)
    {
        SecureString securePassword = new SecureString();
        foreach (char c in password)
        {
            securePassword.AppendChar(c);
        }
        securePassword.MakeReadOnly();
        return securePassword;
    }
}





import React, { useState, useEffect } from 'react';
import largeData from './data.json'; // Import the JSON file (if local)

const UserComponent = () => {
    const [users, setUsers] = useState([]);        // Store the list of users
    const [searchTerm, setSearchTerm] = useState('');  // Store the search term
    const [selectedUser, setSelectedUser] = useState(null);  // Store the selected user

    // Function to extract and set user data
    const fetchUserData = async () => {
        try {
            const extractedUsers = largeData.feed.entry.map(entry => {
                const properties = entry.content[0]["m:properties"][0];
                return {
                    id: properties["d:Id"][0],
                    name: properties["d:Title"][0], // Extract the name
                    email: properties["d:Email"][0] // Extract the email
                };
            });
            setUsers(extractedUsers);  // Store the extracted users in state
        } catch (error) {
            console.error('Error fetching data:', error);
        }
    };

    useEffect(() => {
        fetchUserData();
    }, []);

    // Filter users based on the search term
    const filteredUsers = users.filter(user =>
        user.name.toLowerCase().includes(searchTerm.toLowerCase())
    );

    // Handle the input blur event to select a user if valid
    const handleBlur = () => {
        const user = users.find(user => user.name === searchTerm);
        if (user) {
            setSelectedUser(user);  // Set the selected user if found
        } else {
            setSelectedUser(null);  // Clear the selection if invalid
        }
    };

    // Handle the submission (POST operation to a server)
    const handlePostOperation = async () => {
        if (selectedUser) {
            const postData = {
                id: selectedUser.id,
                name: selectedUser.name,
                email: selectedUser.email
            };

            console.log('Posting data:', postData);

            try {
                const response = await fetch('https://your-api-endpoint-url.com/api/users', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(postData)  // Convert user object to JSON string
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const result = await response.json();  // Parse the response JSON
                console.log('Successfully posted data:', result);
                // Handle success response (e.g., display a message or clear the form)
            } catch (error) {
                console.error('Error posting data:', error);
                // Handle errors (e.g., display an error message to the user)
            }
        } else {
            console.log('No valid user selected');
            // Handle case where no valid user is selected (e.g., display a warning message)
        }
    };

    return (
        <div>
            <h1>User Search and Select</h1>
            
            {/* Search and select combined component */}
            <input
                type="text"
                placeholder="Search user by name"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                onBlur={handleBlur}  // Handle onBlur to check for a valid user
                list="userList"
            />

            {/* Dropdown list based on the search term */}
            <datalist id="userList">
                {filteredUsers.map((user, index) => (
                    <option key={index} value={user.name}>
                        {user.name} - {user.email}
                    </option>
                ))}
            </datalist>

            {/* Button to trigger post operation */}
            <button onClick={handlePostOperation}>
                Submit Selected User
            </button>
        </div>
    );
};

export default UserComponent;





import React, { useState, useEffect } from 'react';
import largeData from './data.json'; // Import the JSON file (if local)

const UserComponent = () => {
    const [users, setUsers] = useState([]);        // Store the list of users
    const [searchTerm, setSearchTerm] = useState('');  // Store the search term
    const [selectedUser, setSelectedUser] = useState(null);  // Store the selected user

    // Function to extract and set user data
    const fetchUserData = async () => {
        try {
            const extractedUsers = largeData.feed.entry.map(entry => {
                const properties = entry.content[0]["m:properties"][0];
                return {
                    id: properties["d:Id"][0],
                    name: properties["d:Title"][0], // Extract the name
                    email: properties["d:Email"][0] // Extract the email
                };
            });
            setUsers(extractedUsers);  // Store the extracted users in state
        } catch (error) {
            console.error('Error fetching data:', error);
        }
    };

    useEffect(() => {
        fetchUserData();
    }, []);

    // Filter users based on the search term
    const filteredUsers = users.filter(user =>
        user.name.toLowerCase().includes(searchTerm.toLowerCase())
    );

    // Handle the input blur event to select a user if valid
    const handleBlur = () => {
        const user = users.find(user => user.name === searchTerm);
        if (user) {
            setSelectedUser(user);  // Set the selected user if found
        } else {
            setSelectedUser(null);  // Clear the selection if invalid
        }
    };

    // Handle the submission (POST operation to a server)
    const handlePostOperation = async () => {
        if (selectedUser) {
            const postData = {
                id: selectedUser.id,
                name: selectedUser.name,
                email: selectedUser.email
            };

            console.log('Posting data:', postData);

            try {
                const response = await fetch('https://your-api-endpoint-url.com/api/users', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(postData)  // Convert user object to JSON string
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const result = await response.json();  // Parse the response JSON
                console.log('Successfully posted data:', result);
                // Handle success response (e.g., display a message or clear the form)
            } catch (error) {
                console.error('Error posting data:', error);
                // Handle errors (e.g., display an error message to the user)
            }
        } else {
            console.log('No valid user selected');
            // Handle case where no valid user is selected (e.g., display a warning message)
        }
    };

    return (
        <div>
            <h1>User Search and Select</h1>
            
            {/* Search and select combined component */}
            <input
                type="text"
                placeholder="Search user by name"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                onBlur={handleBlur}  // Handle onBlur to check for a valid user
                list="userList"
            />

            {/* Dropdown list based on the search term */}
            <datalist id="userList">
                {filteredUsers.map((user, index) => (
                    <option key={index} value={user.name}>
                        {user.name} - {user.email}
                    </option>
                ))}
            </datalist>

            {/* Button to trigger post operation */}
            <button onClick={handlePostOperation}>
                Submit Selected User
            </button>
        </div>
    );
};

export default UserComponent;
